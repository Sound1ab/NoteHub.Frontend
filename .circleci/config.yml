version: 2
jobs:
  build:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Determine which projects have changed and trigger the builds
          command: |
            # Identify modified directories
            LAST_SUCCESSFUL_BUILD_URL="https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH?filter=completed&limit=1"
            LAST_SUCCESSFUL_COMMIT=`curl -Ss -u "$CIRCLE_TOKEN:" $LAST_SUCCESSFUL_BUILD_URL | jq -r '.[0]["vcs_revision"]'`
            #first commit in a branch
            if [[ ${LAST_SUCCESSFUL_COMMIT} == "null" ]]; then
              COMMITS="origin/master"
            else
              COMMITS="${CIRCLE_SHA1}..${LAST_SUCCESSFUL_COMMIT}"
            fi
            git diff --name-only $COMMITS | cut -d/ -f1 | sort -u > projects
            echo -e "Modified directories:\n`cat projects`\n"
            # If modified directories contain Gopkg/vendor directores, build all projects and exit
            buildall=0
            for project in `cat projects`; do
              if [[ ${project} =~ "Gopkg" || ${project} =~ "vendor" ]]; then
                buildall=1
                echo -e "Dependencies change detected. building all $CIRCLE_PROJECT_REPONAME"
                curl -s -u ${CIRCLE_TOKEN}: \
                    -d build_parameters[CIRCLE_JOB]=all \
                    https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              fi
              if [[ ${buildall} -eq 1 ]]; then
                exit 0
              fi
            done
            # Build affected projects and their dependencies
            projects_inc_dep=(`cat projects`)
            echo -e "Calculating dependencies\n"
            for dir in `ls -d */`; do
              for dep in `go list -f '{{ .Deps }}' ./${dir} 2>/dev/null`; do
                for project_dep in `echo $dep | grep github.com/tufin/$CIRCLE_PROJECT_REPONAME | egrep -v "vendor|${dir%\/}"`; do
                  if [[ " ${projects_inc_dep[@]} " =~ " ${project_dep##*\/} " ]] && ! [[ " ${projects_inc_dep[@]} " =~ " ${dir%\/} " ]]; then
                    projects_inc_dep+=(${dir%\/})
                  fi
                done
              done
            done
            echo -e "Building: ${projects_inc_dep[@]}\n"
            for project in ${projects_inc_dep[@]}; do
              if grep -Fxq $project project-dirs; then
                printf "\nTriggerring build for project: "$project
                curl -s -u ${CIRCLE_TOKEN}: \
                  -d build_parameters[CIRCLE_JOB]=${project} \
                  https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              fi
            done
  app:
    working_directory: ~/noted
    docker:
      - image: circleci/node:8.12-browsers-legacy
    environment:
      BUCKET: noted
      REGION: us-east-1
    steps:
      - checkout
      # Log the current branch
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      # Restore cache from the build job which contains the
      # dist folder that needs to be deployed
#        - restore_cache:
#            key: v1-public-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install pip
          command: sudo apt-get install python-dev python-pip
      # Install AWS cli
      - run:
          name: Install aws cli
          command: sudo pip install awscli
      # Set the signature version for the S3 auth
      - run:
          name: Setting Signature Version 4 for S3 Request Authentication
          command: aws configure set default.s3.signature_version s3v4
      # Deploy to the S3 bucket corresponding to the current branch
      - run:
          name: Deploy to S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
                aws --region ${REGION} s3 sync public s3://${BUCKET}-staging/ --delete
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
                aws --region ${REGION} s3 sync public s3://${BUCKET}-master/ --delete
            fi
#      - run:
#          name: Invalidate Cloudfron cache
#          command: |
#            aws configure set preview.cloudfront true  # Turn on cloudfront in AWS CLI
#            aws configure set preview.create-invalidation true
#            aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths /\*